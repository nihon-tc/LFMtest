<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0061)http://code.google.com/p/jnaerator/wiki/CToJavaTransformation -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
 <link rel="icon" type="image/vnd.microsoft.icon" href="http://www.gstatic.com/codesite/ph/images/phosting.ico">
 
 <script type="text/javascript">
 
 
 
 var codesite_token = "f7e09c2c2b7cbddf2f8cbbe4173179d3";
 
 
 var logged_in_user_email = "kimukou.buzz@gmail.com";
 
 
 var relative_base_url = "";
 
 </script>
 
 
 <title>CToJavaTransformation - 
 jnaerator -
 
 Summary of what JNAerator outputs for different kinds of C/ObjectiveC inputs - Project Hosting on Google Code</title>
 
 
 <meta name="ROBOTS" content="NOARCHIVE">
 
 <link type="text/css" rel="stylesheet" href="./CToJavaTransformation - jnaerator - Summary of what JNAerator outputs for different kinds of C ObjectiveC inputs - Project Hosting on Google Code_files/ph_core.css">
 
 <link type="text/css" rel="stylesheet" href="./CToJavaTransformation - jnaerator - Summary of what JNAerator outputs for different kinds of C ObjectiveC inputs - Project Hosting on Google Code_files/ph_detail.css">
 
 
 
 <link type="application/atom+xml" rel="alternate" href="http://code.google.com/feeds/p/jnaerator/svnchanges/basic?path=/wiki/CToJavaTransformation.wiki">
 
 
<!--[if IE]>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/14921861327831835268/css/d_ie.css" >
<![endif]-->
 <style type="text/css">
 .menuIcon.off { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -42px }
 .menuIcon.on { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -28px }
 .menuIcon.down { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 0; }
 
 
 </style>
<script type="text/javascript" async="" src="./CToJavaTransformation - jnaerator - Summary of what JNAerator outputs for different kinds of C ObjectiveC inputs - Project Hosting on Google Code_files/ga.js"></script></head>
<body class="t6">
 <script type="text/javascript">
 var _gaq = _gaq || [];
 _gaq.push(
 ['siteTracker._setAccount', 'UA-18071-1'],
 ['siteTracker._trackPageview']);
 
 _gaq.push(
 ['projectTracker._setAccount', 'UA-3690739-5'],
 ['projectTracker._trackPageview']);
 
 (function() {
 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
 })();
 </script>
<div class="headbg">
 <div id="gaia">
 
 <span>
 
 
 <b>kimukou.buzz@gmail.com</b>
 
 
 | <a href="http://code.google.com/u/kimukou.buzz/" id="projects-dropdown" onclick="return false;"><u>My favorites</u> <small>▼</small></a>
 | <a href="http://code.google.com/u/kimukou.buzz/" onclick="_CS_click(&#39;/gb/ph/profile&#39;);" title="Profile, Updates, and Settings"><u>Profile</u></a>
 | <a href="https://www.google.com/accounts/Logout?continue=http%3A%2F%2Fcode.google.com%2Fp%2Fjnaerator%2Fwiki%2FCToJavaTransformation" onclick="_CS_click(&#39;/gb/ph/signout&#39;);"><u>Sign out</u></a>
 
 </span>

 </div>
 <div class="gbh" style="left: 0pt;"></div>
 <div class="gbh" style="right: 0pt;"></div>
 
 
 <div style="height: 1px"></div>
<!--[if IE 6]>
<div style="text-align:center;">
Support browsers that contribute to open source, try <a href="http://www.firefox.com">Firefox</a> or <a href="http://www.google.com/chrome">Google Chrome</a>.
</div>
<![endif]-->




 <table style="padding:0px; margin: 0px 0px 10px 0px; width:100%" cellpadding="0" cellspacing="0">
 <tbody><tr style="height: 58px;">
 
 <td id="plogo">
 <a href="http://code.google.com/p/jnaerator/">
 
 
 <img src="./CToJavaTransformation - jnaerator - Summary of what JNAerator outputs for different kinds of C ObjectiveC inputs - Project Hosting on Google Code_files/logo" alt="Logo">
 
 </a>
 </td>
 
 <td style="padding-left: 0.5em">
 
 <div id="pname">
 <a href="http://code.google.com/p/jnaerator/">jnaerator</a>
 </div>
 <div id="psum">
 <a id="project_summary_link" href="http://code.google.com/p/jnaerator/">JNAerator - Native C / C++ / Objective-C libraries come to Java !</a>
 
 </div>
 
 </td>
 <td style="white-space:nowrap;text-align:right; vertical-align:bottom;">
 
 <form action="http://code.google.com/hosting/search">
 <input size="30" name="q" value="" type="text">
 <input type="submit" name="projectsearch" value="Search projects">
 </form>
 
 </td></tr>
 </tbody></table>

</div>

 
<div id="mt" class="gtb"> 
 <a href="http://code.google.com/p/jnaerator/" class="tab ">Project&nbsp;Home</a> 
 
 
 
 
 <a href="http://code.google.com/p/jnaerator/downloads/list" class="tab ">Downloads</a>
 
 
 
 
 
 <a href="http://code.google.com/p/jnaerator/wiki/Documentation?tm=6" class="tab active">Wiki</a>
 
 
 
 
 
 <a href="http://code.google.com/p/jnaerator/issues/list" class="tab ">Issues</a>
 
 
 
 
 
 <a href="http://code.google.com/p/jnaerator/wiki/Sources?tm=4" class="tab ">Source</a>
 
 
 
 <div class="gtbc"></div>
</div>
<table cellspacing="0" cellpadding="0" width="100%" align="center" border="0" class="st">
 <tbody><tr>
 
 
 
 <td class="subt">
 <div class="issueDetail">
<div class="isf">
 
 <span class="inIssueList"> 
 <span>Search</span>
 <form action="http://code.google.com/p/jnaerator/w/list" method="GET" style="display:inline">
 <select id="can" name="can" style="font-size:92%">
 <option disabled="disabled">Search within:</option>
 
 <option value="1">&nbsp;All wiki pages</option>
 <option value="3">&nbsp;Featured pages</option>
 <option value="2" selected="selected">&nbsp;Current pages</option>
 
 
 <option value="5">&nbsp;My starred pages</option>
 
 <option value="4">&nbsp;Deprecated pages</option>
 
 </select>
 <span>for</span>
 <span id="qq"><input type="text" size="38" id="searchq" name="q" value="" autocomplete="off" style="font-size:92%"></span>
 
 
 <input type="submit" value="Search" style="font-size:92%">
 </form>
 </span>

 
 
 
 
 
 
 

</div>
</div>

 </td>
 
 
 
 
 
 
 <td align="right" valign="top" class="bevel-right"></td>
 </tr>
</tbody></table>
<script type="text/javascript">
 var cancelBubble = false;
 function _go(url) { document.location = url; }
</script>


<div id="maincol" style="padding:0 3px 3px 0; margin:0">

 
<!-- IE -->






 
<style type="text/css">
 #wikisidebar { border-right: 2px solid #e9e9e9;}
 #wikimaincol { padding-top: 6px; padding-left:1em}
 #sidebarcontainer { padding: 4px 2px 2px 2px; width:20em; overflow:hidden}
 .sidebartop ul { margin:0 0 0 .5em; padding-left:0 !important; list-style:none}
 .sidebartop ul ul { margin-left:1em; padding-left:0; list-style:none; display:none}
 .sidebartop li { margin:0 0 2px 0; padding:1px; padding-left:14px; cursor:pointer}
 .sidebartop li a { padding:2px}
 .sidebartop li { background: url(http://www.gstatic.com/codesite/ph/images/plus.gif) no-repeat 1px 3px}
 .sidebartop li.treeopen { background: url(http://www.gstatic.com/codesite/ph/images/minus.gif) no-repeat 1px 3px}
 .sidebartop li.treeleaf { background:none}
 .currentpagelink { background:#ebeff9}
 .sidebartop ul.treeleafcontainer { display:block;}
</style>



 <style type="text/css">
 .artifactcomment {
 margin: .5em 0 0 0;
 padding: .3em 0 .3em .3em;
 border-top: 3px solid #c3d9ff;
 }
 #commentlist {
 border-bottom: 3px solid #c3d9ff;
 }
 #commentform { padding-top: 1em; }
 .delcom { background: #e8e8e8 }
 .commentcontent { margin: 1em 0;}
 </style>


 <div id="wikicontent">
 <table width="100%" border="0" cellspacing="0" cellpadding="0">
 <tbody><tr>
 
 <td class="vt expand" id="wikisidebar">
 <div>
 
 <div style="float:right; padding:0 3px">
 <a class="ifExpand" style="font-size:130%; color:blue; text-decoration:none" href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#" onclick="_DW_toggleSidebar(&#39;&#39;, &#39;jnaerator&#39;, this, &#39;f7e09c2c2b7cbddf2f8cbbe4173179d3&#39;); return false;" title="Hide sidebar"><b>‹‹</b></a>
 </div>
 <div class="ifCollapse" style="padding:0 2px">
 <a style="font-size:130%; color:blue; text-decoration:none" href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#" onclick="_DW_toggleSidebar(&#39;&#39;, &#39;jnaerator&#39;, this, &#39;f7e09c2c2b7cbddf2f8cbbe4173179d3&#39;); return false;" title="Show sidebar"><b>››</b></a>
 </div>
 
 
 <div id="sidebarcontainer" class="sidebartop ifExpand">
 <ul class="treeleafcontainer"><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/JNAeratorFAQ">FAQ</a> </li><li>Project </li><ul><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/AboutJNAerator">AboutJNAerator</a> </li><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/AboutJNAeratorStudio">AboutJNAeratorStudio</a> </li><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">CreditsAndLicense</a> </li><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/ProjectsUsingJNAerator">ProjectsUsingJNAerator</a> </li><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/Roadmap">Roadmap</a> </li><li class="treeleaf"><a href="http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/jnaerator/CHANGELOG" rel="nofollow">Changelog</a> </li></ul><li class="treeopen"><a href="http://code.google.com/p/jnaerator/wiki/Documentation">Documentation</a> </li><ul class="treeleafcontainer"><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/SimpleMeaningfulExample">SimpleMeaningfulExample</a> </li><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/JNAeratorFiles">JNAeratorFiles</a> </li><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/CommandLineOptionsAndEnvironmentVariables">CommandLineOptionsAndEnvironmentVariables</a> </li><li class="treeleaf"><a href="./CToJavaTransformation - jnaerator - Summary of what JNAerator outputs for different kinds of C ObjectiveC inputs - Project Hosting on Google Code_files/CToJavaTransformation - jnaerator - Summary of what JNAerator outputs for different kinds of C ObjectiveC inputs - Project Hosting on Google Code.htm" class="currentpagelink">CToJavaTransformation</a> </li><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/ObjectiveC">ObjectiveC</a> </li><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/EmbeddingJNAerator">EmbeddingJNAerator</a> </li><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/Reification">Reification</a> </li></ul><li>Hands-on </li><ul><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/downloads/list" rel="nofollow">Download</a> </li><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/TroubleShootingJNAeration">TroubleShootingJNAeration</a> </li><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/Maven">Maven</a> </li><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/Sources">Sources</a> </li><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/CompilingJNAerator">CompilingJNAerator</a> </li><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/AutomaticTests">AutomaticTests</a> </li><li class="treeleaf"><a href="https://jna.dev.java.net/servlets/SummarizeList?listName=users" rel="nofollow">Mailing-List</a> </li></ul><li>Misc </li><ul><li class="treeleaf"><a href="http://code.google.com/p/jnaerator/wiki/LanguagesSyntaxLinks">LanguagesSyntaxLinks</a> </li></ul></ul><p>   </p>
 </div>
 <div class="round1"></div>
 <div class="round2"></div>
 <div class="round4"></div>
 </div>
</td>

 
 <td class="vt" id="wikimaincol" width="100%">
 
 <div style="float:right; width:18em" id="wikimeta">
 <div class="pmeta_bubble_bg">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <table style="padding: 5px">
 <tbody><tr><td colspan="2" style="padding-bottom:5px">Updated <span title="Thu Aug 26 01:39:28 2010">Aug 26, 2010</span>
 
 by <a style="white-space: nowrap" href="http://code.google.com/u/olivier.chafik/">olivier.chafik</a>
 </td></tr>
 
 
 </tbody></table>
 </div>
 <div class="round1"></div>
 <div class="round2"></div>
 <div class="round4"></div>
 </div>
 </div>
 
 <div id="wikiheader" style="margin-bottom:1em">
 
 <img width="15" height="15" id="star_img" src="./CToJavaTransformation - jnaerator - Summary of what JNAerator outputs for different kinds of C ObjectiveC inputs - Project Hosting on Google Code_files/star_off.gif" style="cursor:pointer" onclick="_CS_toggleStar(this,
 &#39;&#39;,
 {&#39;scope&#39;: &#39;wiki&#39;,
 &#39;user&#39;: &#39;_CURRENT_USER&#39;,
 &#39;item&#39;: &#39;jnaerator:CToJavaTransformation&#39;,
 &#39;token&#39;: codesite_token
 });">
 
 &nbsp;
 <span style="font-size:120%;font-weight:bold">CToJavaTransformation</span>
 &nbsp;
 
 
 <div style="font-style:italic; margin-top: 3px">Summary of what JNAerator outputs for different kinds of C/ObjectiveC inputs</div>
 
 </div>
 <p></p><ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Functions">Functions</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Structs">Structs</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Struct_fields">Struct fields</a></li><ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Arrays_fields">Arrays fields</a></li><ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Arrays_fields_with_initializers">Arrays fields with initializers</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Arrays_fields_with_partial_initializers">Arrays fields with partial initializers</a></li></ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Callbacks_fields">Callbacks fields</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Bit_Fields">Bit Fields</a></li></ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Anonymous_types">Anonymous types</a></li><ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Deanonymization">Deanonymization</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Naming_convention">Naming convention</a></li></ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Global_Variables">Global Variables</a></li><ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Primitive_values">Primitive values</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Primitive_pointers">Primitive pointers</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Struct_&_struct_pointers">Struct &amp; struct pointers</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Constant_expressions_&_Defines">Constant expressions &amp; Defines</a></li></ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Objective-C_Classes">Objective-C Classes</a></li></ul> <p></p><p></p><ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Functions">Functions</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Structs">Structs</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Struct_fields">Struct fields</a></li><ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Arrays_fields">Arrays fields</a></li><ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Arrays_fields_with_initializers">Arrays fields with initializers</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Arrays_fields_with_partial_initializers">Arrays fields with partial initializers</a></li></ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Callbacks_fields">Callbacks fields</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Bit_Fields">Bit Fields</a></li></ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Anonymous_types">Anonymous types</a></li><ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Deanonymization">Deanonymization</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Naming_convention">Naming convention</a></li></ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Global_Variables">Global Variables</a></li><ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Primitive_values">Primitive values</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Primitive_pointers">Primitive pointers</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Struct_&_struct_pointers">Struct &amp; struct pointers</a></li><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Constant_expressions_&_Defines">Constant expressions &amp; Defines</a></li></ul><li><a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Objective-C_Classes">Objective-C Classes</a></li></ul> <p></p><h1><a name="Functions"></a>Functions<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Functions" class="section_anchor">¶</a></h1><p>There may be more than one way to translate some arguments. For instance, a <tt> const int* pInts </tt> argument could be mapped to an <tt> IntByReference </tt>, an <tt> IntBuffer </tt> or an <tt> int[] </tt>. </p><p>It wouldn't be reasonable to provide all of the possible combinations for all arguments (there could be too many of them), so JNAerator does the following : for each function, it tries at most three translations :  </p><ul><li>one which favours <a href="https://jna.dev.java.net/javadoc/com/sun/jna/Pointer.html" rel="nofollow">Pointer</a>, <a href="https://jna.dev.java.net/javadoc/com/sun/jna/ptr/IntByReference.html" rel="nofollow">IntByReference</a> and other <a href="https://jna.dev.java.net/javadoc/com/sun/jna/ptr/package-tree.html" rel="nofollow">com.sun.jna.ptr.*</a> classes </li><li>one that favours String, <a href="https://jna.dev.java.net/javadoc/com/sun/jna/WString.html" rel="nofollow">WString</a>, <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/nio/ByteBuffer.html" rel="nofollow">ByteBuffer</a> and other <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/nio/package-summary.html" rel="nofollow">java.nio.*</a> buffers and defaults to aforementioned Pointer subclasses when the use of Buffer classes is not appropriate </li><li>one that favours primitive arrays where possible, then backs to Strings and Buffers, then to Pointers </li></ul><p></p><p>As a result, the following function : </p><pre class="prettyprint"><span class="kwd">int</span><span class="pun">*</span><span class="pln"> process</span><span class="pun">(</span><span class="kwd">int</span><span class="pun">*</span><span class="pln"> pInts</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">*</span><span class="pln"> cpInts</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">wchar_t</span><span class="pun">*</span><span class="pln"> wstring</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> d</span><span class="pun">);</span></pre><p>is translated to : </p><pre class="prettyprint"><span class="com">/// @deprecated use the safer methods {@link #process(java.nio.IntBuffer, int[], com.sun.jna.WString, double)} and {@link #process(java.nio.IntBuffer, java.nio.IntBuffer, com.sun.jna.WString, double)} instead</span><span class="pln"><br></span><span class="lit">@Deprecated</span><span class="pln"><br>com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="pln">ptr</span><span class="pun">.</span><span class="typ">IntByReference</span><span class="pln"> process</span><span class="pun">(</span><span class="pln">com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="pln">ptr</span><span class="pun">.</span><span class="typ">IntByReference</span><span class="pln"> pInts</span><span class="pun">,</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="pln">ptr</span><span class="pun">.</span><span class="typ">IntByReference</span><span class="pln"> cpInts</span><span class="pun">,</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="pln">ptr</span><span class="pun">.</span><span class="typ">ShortByReference</span><span class="pln"> wstring</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> d</span><span class="pun">);</span><span class="pln"><br><br>com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="pln">ptr</span><span class="pun">.</span><span class="typ">IntByReference</span><span class="pln"> process</span><span class="pun">(</span><span class="pln">java</span><span class="pun">.</span><span class="pln">nio</span><span class="pun">.</span><span class="typ">IntBuffer</span><span class="pln"> pInts</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> cpInts</span><span class="pun">[],</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">WString</span><span class="pln"> wstring</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> d</span><span class="pun">);</span><span class="pln"><br><br>com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="pln">ptr</span><span class="pun">.</span><span class="typ">IntByReference</span><span class="pln"> process</span><span class="pun">(</span><span class="pln">java</span><span class="pun">.</span><span class="pln">nio</span><span class="pun">.</span><span class="typ">IntBuffer</span><span class="pln"> pInts</span><span class="pun">,</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">nio</span><span class="pun">.</span><span class="typ">IntBuffer</span><span class="pln"> cpInts</span><span class="pun">,</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">WString</span><span class="pln"> wstring</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> d</span><span class="pun">);</span></pre><p>But of course in simple cases, there is only one or two translations : </p><pre class="prettyprint"><span class="kwd">int</span><span class="pln"> process</span><span class="pun">(</span><span class="kwd">void</span><span class="pun">*</span><span class="pln"> ptr</span><span class="pun">);</span></pre><p>becomes :  </p><pre class="prettyprint"><span class="kwd">int</span><span class="pln"> process</span><span class="pun">(</span><span class="pln">com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Pointer</span><span class="pln"> ptr</span><span class="pun">);</span></pre><h1><a name="Structs"></a>Structs<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Structs" class="section_anchor">¶</a></h1><p>JNAerated structs all get ByReference and ByValue subclasses (that have a struct-pointer-copy constructor) + a constructor with a Pointer and an offset, to cast any memory block to a struct. </p><pre class="prettyprint"><span class="kwd">struct</span><span class="pln"> A </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">;</span><span class="pln"><br></span><span class="pun">};</span><span class="pln"><br></span><span class="kwd">struct</span><span class="pln"> B </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp;A a</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp;A </span><span class="pun">*</span><span class="pln">pa</span><span class="pun">;</span><span class="pln"><br></span><span class="pun">};</span></pre><p>becomes (comments were stripped out) : </p><pre class="prettyprint"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> A </span><span class="kwd">extends</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> A</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> &nbsp;A</span><span class="pun">(</span><span class="pln">com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Pointer</span><span class="pln"> pointer</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> offset</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">super</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; useMemory</span><span class="pun">(</span><span class="pln">pointer</span><span class="pun">,</span><span class="pln"> offset</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; read</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> &nbsp;A</span><span class="pun">(</span><span class="pln">A </span><span class="kwd">struct</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">(</span><span class="kwd">struct</span><span class="pun">.</span><span class="pln">getPointer</span><span class="pun">(),</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ByReference</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> A </span><span class="kwd">implements</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pun">.</span><span class="typ">ByReference</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">ByReference</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">ByReference</span><span class="pun">(</span><span class="pln">A </span><span class="kwd">struct</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">super</span><span class="pun">(</span><span class="kwd">struct</span><span class="pun">.</span><span class="pln">getPointer</span><span class="pun">(),</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ByValue</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> A </span><span class="kwd">implements</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pun">.</span><span class="typ">ByValue</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">ByValue</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">ByValue</span><span class="pun">(</span><span class="pln">A </span><span class="kwd">struct</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">super</span><span class="pun">(</span><span class="kwd">struct</span><span class="pun">.</span><span class="pln">getPointer</span><span class="pun">(),</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">;</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> B </span><span class="kwd">extends</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> &nbsp;B</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> &nbsp;B</span><span class="pun">(</span><span class="pln">com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Pointer</span><span class="pln"> pointer</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> offset</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">super</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; useMemory</span><span class="pun">(</span><span class="pln">pointer</span><span class="pun">,</span><span class="pln"> offset</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; read</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> &nbsp;B</span><span class="pun">(</span><span class="pln">B </span><span class="kwd">struct</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">(</span><span class="kwd">struct</span><span class="pun">.</span><span class="pln">getPointer</span><span class="pun">(),</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ByReference</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> B </span><span class="kwd">implements</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pun">.</span><span class="typ">ByReference</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">ByReference</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">ByReference</span><span class="pun">(</span><span class="pln">B </span><span class="kwd">struct</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">super</span><span class="pun">(</span><span class="kwd">struct</span><span class="pun">.</span><span class="pln">getPointer</span><span class="pun">(),</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ByValue</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> B </span><span class="kwd">implements</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pun">.</span><span class="typ">ByValue</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">ByValue</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">ByValue</span><span class="pun">(</span><span class="pln">B </span><span class="kwd">struct</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">super</span><span class="pun">(</span><span class="kwd">struct</span><span class="pun">.</span><span class="pln">getPointer</span><span class="pun">(),</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> A</span><span class="pun">.</span><span class="typ">ByValue</span><span class="pln"> a</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> A</span><span class="pun">.</span><span class="typ">ByReference</span><span class="pln"> pa</span><span class="pun">;</span><span class="pln"><br></span><span class="pun">}</span></pre><h1><a name="Struct_fields"></a>Struct fields<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Struct_fields" class="section_anchor">¶</a></h1><h2><a name="Arrays_fields"></a>Arrays fields<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Arrays_fields" class="section_anchor">¶</a></h2><h3><a name="Arrays_fields_with_initializers"></a>Arrays fields with initializers<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Arrays_fields_with_initializers" class="section_anchor">¶</a></h3><p>Arrays struct fields with initializers are converted to Java arrays : </p><pre class="prettyprint"><span class="kwd">int</span><span class="pln"> iarr</span><span class="pun">[</span><span class="lit">4</span><span class="pun">];</span><span class="pln"> <br></span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> csarr</span><span class="pun">[</span><span class="lit">3</span><span class="pun">][</span><span class="lit">4</span><span class="pun">];</span><span class="pln"> <br></span><span class="kwd">char</span><span class="pln"> s</span><span class="pun">[</span><span class="lit">8</span><span class="pun">];</span><span class="pln"><br></span><span class="kwd">long</span><span class="pun">*</span><span class="pln"> </span><span class="pun">(*</span><span class="pln">foo2</span><span class="pun">[</span><span class="lit">12</span><span class="pun">][</span><span class="lit">8</span><span class="pun">])();</span></pre><p>becomes </p><pre class="prettyprint"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">[]</span><span class="pln"> iarr </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">[(</span><span class="lit">4</span><span class="pun">)];</span><span class="pln"><br></span><span class="kwd">public</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="pln">ptr</span><span class="pun">.</span><span class="typ">ByteByReference</span><span class="pun">[]</span><span class="pln"> csarr </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="pln">ptr</span><span class="pun">.</span><span class="typ">ByteByReference</span><span class="pun">[</span><span class="lit">3</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">4</span><span class="pun">];</span><span class="pln"><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[]</span><span class="pln"> s </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">byte</span><span class="pun">[(</span><span class="lit">8</span><span class="pun">)];</span><span class="pln"><br></span><span class="kwd">public</span><span class="pln"> foo2_callback</span><span class="pun">[]</span><span class="pln"> foo2 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> foo2_callback</span><span class="pun">[</span><span class="lit">12</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">8</span><span class="pun">];</span><span class="pln"><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> foo2_callback </span><span class="kwd">extends</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Callback</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="pln">ptr</span><span class="pun">.</span><span class="typ">NativeLongByReference</span><span class="pln"> callback</span><span class="pun">();</span><span class="pln"><br></span><span class="pun">}</span></pre><h3><a name="Arrays_fields_with_partial_initializers"></a>Arrays fields with partial initializers<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Arrays_fields_with_partial_initializers" class="section_anchor">¶</a></h3><p>When an array has partial size initializers, JNAerator initializes the known part and switches to Pointer for the rest of the type : </p><pre class="prettyprint"><span class="kwd">char</span><span class="pln"> </span><span class="pun">*(*(**</span><span class="pln">foo</span><span class="pun">[][</span><span class="lit">8</span><span class="pun">])())[];</span></pre><p>becomes </p><pre class="prettyprint"><span class="kwd">public</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Pointer</span><span class="pun">[]</span><span class="pln"> foo </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Pointer</span><span class="pun">[</span><span class="lit">8</span><span class="pun">];</span></pre><h2><a name="Callbacks_fields"></a>Callbacks fields<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Callbacks_fields" class="section_anchor">¶</a></h2><pre class="prettyprint"><span class="kwd">long</span><span class="pln"> </span><span class="pun">(</span><span class="pln">__cdecl </span><span class="pun">*</span><span class="kwd">const</span><span class="pln"> fptr</span><span class="pun">)();</span><span class="pln"><br></span><span class="kwd">void</span><span class="pln"> </span><span class="pun">(*</span><span class="pln">functions</span><span class="pun">[</span><span class="lit">8</span><span class="pun">])(</span><span class="kwd">void</span><span class="pun">*);</span><span class="pln"><br></span><span class="kwd">long</span><span class="pln"> </span><span class="pun">(*</span><span class="pln">foo</span><span class="pun">[</span><span class="lit">10</span><span class="pun">])(</span><span class="kwd">union</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">long</span><span class="pln"> l</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">;</span><span class="pln"> </span><span class="pun">});</span></pre><p>becomes </p><pre class="prettyprint"><span class="kwd">public</span><span class="pln"> fptr_callback fptr</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> fptr_callback </span><span class="kwd">extends</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Callback</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">NativeLong</span><span class="pln"> callback</span><span class="pun">();</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br><br></span><span class="kwd">public</span><span class="pln"> functions_callback</span><span class="pun">[]</span><span class="pln"> functions </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> functions_callback</span><span class="pun">[(</span><span class="lit">8</span><span class="pun">)];</span><span class="pln"><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> functions_callback </span><span class="kwd">extends</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Callback</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">void</span><span class="pln"> callback</span><span class="pun">(</span><span class="pln">com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Pointer</span><span class="pln"> arg1</span><span class="pun">);</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br><br></span><span class="kwd">public</span><span class="pln"> foo_callback</span><span class="pun">[]</span><span class="pln"> foo </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> foo_callback</span><span class="pun">[(</span><span class="lit">10</span><span class="pun">)];</span><span class="pln"><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> foo_callback </span><span class="kwd">extends</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Callback</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">NativeLong</span><span class="pln"> callback</span><span class="pun">(</span><span class="pln">foo_callback_arg1_union</span><span class="pun">.</span><span class="typ">ByValue</span><span class="pln"> arg1</span><span class="pun">);</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> foo_callback_arg1_union </span><span class="kwd">extends</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Union</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ByReference</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> foo_callback_arg1_union </span><span class="kwd">implements</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pun">.</span><span class="typ">ByReference</span><span class="pln"> </span><span class="pun">{}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ByValue</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> foo_callback_arg1_union </span><span class="kwd">implements</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pun">.</span><span class="typ">ByValue</span><span class="pln"> </span><span class="pun">{}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">NativeLong</span><span class="pln"> l</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">;</span><span class="pln"><br></span><span class="pun">}</span></pre><h2><a name="Bit_Fields"></a>Bit Fields<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Bit_Fields" class="section_anchor">¶</a></h2><pre class="prettyprint"><span class="com">// Stored on 1 byte !</span><span class="pln"><br></span><span class="kwd">struct</span><span class="pln"> S </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">unsigned</span><span class="pln"> likes_jnaerator </span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> times_tried_it </span><span class="pun">:</span><span class="pln"> </span><span class="lit">7</span><span class="pun">;</span><span class="pln"> </span><span class="com">// stored on 7 bits</span><span class="pln"><br></span><span class="pun">};</span></pre><p>becomes : </p><pre class="prettyprint"><span class="com">/** Stored on 1 byte ! */</span><span class="pln"><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> S </span><span class="kwd">extends</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="lit">@com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Bits</span><span class="pun">(</span><span class="lit">1</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> likes_jnaerator</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="lit">@com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Bits</span><span class="pun">(</span><span class="lit">7</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> times_tried_it</span><span class="pun">;</span><span class="pln"><br></span><span class="pun">}</span></pre><h1><a name="Anonymous_types"></a>Anonymous types<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Anonymous_types" class="section_anchor">¶</a></h1><p>In C/C++/Objective-C, it is possible to make use of anonymous types, such as in the following code : </p><pre class="prettyprint"><span class="kwd">void</span><span class="pln"> </span><span class="typ">ComplexArgFunction</span><span class="pun">(</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">union</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">enum</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> A</span><span class="pun">,</span><span class="pln"> B </span><span class="pun">}</span><span class="pln"> e</span><span class="pun">;</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">float</span><span class="pln"> f</span><span class="pun">;</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"> u</span><span class="pun">;</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">long</span><span class="pln"> v</span><span class="pun">;</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">void</span><span class="pln"> </span><span class="pun">(*</span><span class="pln">fptr</span><span class="pun">)();</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}*</span><span class="pln"> pArg<br></span><span class="pun">);</span></pre><p>Which is <i>roughly</i> equivalent to the "deanonymized" version : </p><pre class="prettyprint"><span class="com">/// S, U and F gain some higher level visibility compared to the anonymous version</span><span class="pln"><br></span><span class="kwd">typedef</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">typedef</span><span class="pln"> </span><span class="kwd">union</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">typedef</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A</span><span class="pun">,</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; B<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"> E</span><span class="pun">;</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; E e</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">float</span><span class="pln"> f</span><span class="pun">;</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"> U</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; U u</span><span class="pun">;</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">long</span><span class="pln"> v</span><span class="pun">;</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">typedef</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="pun">(*</span><span class="pln">F</span><span class="pun">)();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; F </span><span class="pun">*</span><span class="pln">fptr</span><span class="pun">;</span><span class="pln"> <br></span><span class="pun">}</span><span class="pln"> S</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">void</span><span class="pln"> </span><span class="typ">ComplexArgFunction</span><span class="pun">(</span><span class="pln">S</span><span class="pun">*</span><span class="pln"> pArg</span><span class="pun">);</span></pre><h2><a name="Deanonymization"></a>Deanonymization<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Deanonymization" class="section_anchor">¶</a></h2><p>As Java does not support such inline definition of anonymous types, JNA requires us to provide it with something that looks like the "deanonymized" version of the code, that is : choose arbitrary names for anonymous types. </p><p>Another option would be to simply skip everything anonymous, but this would exclude way too much code. </p><p>In the deanonymizing process, JNAerator tries its best to choose names that make sense (hence no S, F, U, E, no Struct1, Union3... !). </p><p>Here's what JNAerator produces out of the anonymous version : </p><pre class="prettyprint"><span class="pln">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">...</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ComplexArgFunction_pArg_struct</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ByReference</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">ComplexArgFunction_pArg_struct</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pun">.</span><span class="typ">ByReference</span><span class="pln"> </span><span class="pun">{}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ByValue</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">ComplexArgFunction_pArg_struct</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pun">.</span><span class="typ">ByValue</span><span class="pln"> </span><span class="pun">{}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">/// Allocate a new ComplexArgFunction_pArg_struct struct on the heap</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> &nbsp;</span><span class="typ">ComplexArgFunction_pArg_struct</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">/// Cast data at given memory location (pointer + offset) as an existing ComplexArgFunction_pArg_struct struct</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> &nbsp;</span><span class="typ">ComplexArgFunction_pArg_struct</span><span class="pun">(</span><span class="pln">com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Pointer</span><span class="pln"> pointer</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> offset</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">super</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; useMemory</span><span class="pun">(</span><span class="pln">pointer</span><span class="pun">,</span><span class="pln"> offset</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; read</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> u_union</span><span class="pun">.</span><span class="typ">ByValue</span><span class="pln"> u</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">NativeLong</span><span class="pln"> v</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> fptr_callback fptr</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> u_union </span><span class="kwd">extends</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Union</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ByReference</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> u_union </span><span class="kwd">implements</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pun">.</span><span class="typ">ByReference</span><span class="pln"> </span><span class="pun">{}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ByValue</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> u_union </span><span class="kwd">implements</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pun">.</span><span class="typ">ByValue</span><span class="pln"> </span><span class="pun">{}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">/// Allocate a new u_union struct on the heap</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; u_union</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">/// Cast data at given memory location (pointer + offset) as an existing u_union struct</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; u_union</span><span class="pun">(</span><span class="pln">com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Pointer</span><span class="pln"> pointer</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> offset</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">super</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; useMemory</span><span class="pun">(</span><span class="pln">pointer</span><span class="pun">,</span><span class="pln"> offset</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; read</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> e</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">float</span><span class="pln"> f</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> e_enum </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> A </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> B </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> fptr_callback </span><span class="kwd">extends</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Callback</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">void</span><span class="pln"> callback</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">ComplexArgFunction</span><span class="pun">(</span><span class="typ">ComplexArgFunction_pArg_struct</span><span class="pun">.</span><span class="typ">ByReference</span><span class="pln"> pArg</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">...</span></pre><h2><a name="Naming_convention"></a>Naming convention<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Naming_convention" class="section_anchor">¶</a></h2><p><strong>This is subject to change.</strong> </p><p>Deanonymized types get a suffix that indicate their type : </p><ul><li><i>struct for structures </i></li><li>callback for function signatures </li><li><i>enum for enumerations </i></li><li>union for unions </li></ul><p></p><p>The choice was made not to use Java naming conventions by default, because it would produce strange names when structures and fields have very short names. </p><h1><a name="Global_Variables"></a>Global Variables<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Global_Variables" class="section_anchor">¶</a></h1><p>Global variables are JNAerated with a lazy implementation : we don't want to try and bind all of the globals when the interface is instantiated or some of its static initializers is called. This could lead to many linkage errors, and it's safer to wait until a global is actually used to provoke such a failure. </p><p>JNA provides the <a href="https://jna.dev.java.net/javadoc/com/sun/jna/NativeLibrary.html#getGlobalVariableAddress(java.lang.String)" rel="nofollow">NativeLibrary. getGlobalVariableAddress(symbolName)</a> method to get the address of a global variable. </p><p>In JNAerated code, a global <tt> int errno; </tt> in library "c" is accessed through <tt> CLibrary.errno.get() </tt> (this returns directly an <a href="https://jna.dev.java.net/javadoc/com/sun/jna/ptr/IntByReference.html" rel="nofollow">IntByReference</a>). </p><h2><a name="Primitive_values"></a>Primitive values<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Primitive_values" class="section_anchor">¶</a></h2><pre class="prettyprint"><span class="kwd">int</span><span class="pln"> errno</span><span class="pun">;</span></pre><p>becomes: </p><pre class="prettyprint"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> errno </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="pln">ptr</span><span class="pun">.</span><span class="typ">IntByReference</span><span class="pln"> errno</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">synchronized</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="pln">ptr</span><span class="pun">.</span><span class="typ">IntByReference</span><span class="pln"> </span><span class="kwd">get</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">errno </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; errno </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="pln">ptr</span><span class="pun">.</span><span class="typ">IntByReference</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; errno</span><span class="pun">.</span><span class="pln">setPointer</span><span class="pun">(</span><span class="typ">TestLibrary</span><span class="pun">.</span><span class="pln">INSTANCE</span><span class="pun">.</span><span class="pln">getGlobalVariableAddress</span><span class="pun">(</span><span class="str">"errno"</span><span class="pun">));</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">return</span><span class="pln"> errno</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span></pre><h2><a name="Primitive_pointers"></a>Primitive pointers<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Primitive_pointers" class="section_anchor">¶</a></h2><pre class="prettyprint"><span class="kwd">int</span><span class="pun">*</span><span class="pln"> pInt</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">void</span><span class="pun">*</span><span class="pln"> pVoid</span><span class="pun">;</span></pre><p>become : </p><pre class="prettyprint"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> pInt </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> pInt_holder </span><span class="kwd">extends</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="pln">ptr</span><span class="pun">.</span><span class="typ">IntByReference</span><span class="pln"> value</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> &nbsp;pInt_holder</span><span class="pun">(</span><span class="pln">com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Pointer</span><span class="pln"> pointer</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">super</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; useMemory</span><span class="pun">(</span><span class="pln">pointer</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; read</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> pInt_holder pInt</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">synchronized</span><span class="pln"> pInt_holder </span><span class="kwd">get</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">pInt </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pInt </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> pInt_holder</span><span class="pun">(</span><span class="typ">TestLibrary</span><span class="pun">.</span><span class="pln">INSTANCE</span><span class="pun">.</span><span class="pln">getGlobalVariableAddress</span><span class="pun">(</span><span class="str">"pInt"</span><span class="pun">));</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">return</span><span class="pln"> pInt</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span><span class="pln"><br><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> pVoid </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> pVoid_holder </span><span class="kwd">extends</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Structure</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Pointer</span><span class="pln"> value</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> &nbsp;pVoid_holder</span><span class="pun">(</span><span class="pln">com</span><span class="pun">.</span><span class="pln">sun</span><span class="pun">.</span><span class="pln">jna</span><span class="pun">.</span><span class="typ">Pointer</span><span class="pln"> pointer</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">super</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; useMemory</span><span class="pun">(</span><span class="pln">pointer</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; read</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> pVoid_holder pVoid</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">synchronized</span><span class="pln"> pVoid_holder </span><span class="kwd">get</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">pVoid </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pVoid </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> pVoid_holder</span><span class="pun">(</span><span class="typ">TestLibrary</span><span class="pun">.</span><span class="pln">INSTANCE</span><span class="pun">.</span><span class="pln">getGlobalVariableAddress</span><span class="pun">(</span><span class="str">"pVoid"</span><span class="pun">));</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">return</span><span class="pln"> pVoid</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span></pre><h2><a name="Struct_&amp;_struct_pointers"></a>Struct &amp; struct pointers<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Struct_&_struct_pointers" class="section_anchor">¶</a></h2><h2><a name="Constant_expressions_&amp;_Defines"></a>Constant expressions &amp; Defines<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Constant_expressions_&_Defines" class="section_anchor">¶</a></h2><p>Constant expressions are typically not exported in dynamic libraries. Hence they are simply translated and put as static fields in the resulting interfaces </p><pre class="prettyprint"><span class="com">#define</span><span class="pln"> X </span><span class="lit">10</span><span class="pln"><br></span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> X </span><span class="pun">+</span><span class="pln"> </span><span class="pun">(</span><span class="lit">1</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span></pre><p>becomes : </p><pre class="prettyprint"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">10</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="pun">(</span><span class="lit">1</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> X </span><span class="pun">=</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span></pre><h1><a name="Objective-C_Classes"></a>Objective-C Classes<a href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#Objective-C_Classes" class="section_anchor">¶</a></h1><p>See <a href="http://code.google.com/p/jnaerator/wiki/ObjectiveC">ObjectiveC</a> </p>
 </td> 
 </tr>
 </tbody></table>
 </div>


 
 
 
 
 
 <div id="commentform">
 <form action="http://code.google.com/p/jnaerator/w/detail.do" method="post">
 <table>
 <tbody><tr><td class="vt">
 <input type="hidden" name="pagename" value="CToJavaTransformation">
 <input type="hidden" name="token" value="f7e09c2c2b7cbddf2f8cbbe4173179d3">
 <div>Enter a comment:</div>
 <textarea name="content" rows="6" cols="80"></textarea><br><br>
 <input type="submit" name="submit" value="Submit">
 </td>
 <td class="vt">
 <div id="whb" class="tip" style="width:15em">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner opened" id="entrybubble">
 <a class="ifClosed" href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#whb" style="float:right" onclick="_toggleHidden(this); document.getElementById(&#39;wikihelp&#39;).value=&#39;opened&#39;">show</a>
 <a class="ifOpened" href="http://code.google.com/p/jnaerator/wiki/CToJavaTransformation#whb" style="float:right" onclick="_toggleHidden(this); document.getElementById(&#39;wikihelp&#39;).value=&#39;closed&#39;">hide</a>
 <b>Wiki markup help</b>
 <div class="ifOpened">
 <div style="padding:2px; font-size:96%">
 =Heading1=<br>
 ==Heading2==<br>
 ===Heading3===<br>
 <br>
 *bold* &nbsp; &nbsp;
 _italic_<br>
 `inline code`<br>
 escape: `*`<br>
 <br>
 Indent lists 2 spaces:<br>
 &nbsp;&nbsp;* bullet item<br>
 &nbsp;&nbsp;# numbered list<br>
 <br>
 {{{<br>
 verbatim code block<br>
 }}}<br>
 <br>
 Horizontal rule<br>
 ----
 <br>
 <br>
 WikiWordLink<br>
 [http://domain/page&nbsp;label]<br>
 http://domain/page<br>
 <br>
 || table || cells ||<br>
 
 </div><br>
 <a href="http://code.google.com/p/support/wiki/WikiSyntax" target="new">More
 examples</a>
 <a href="http://code.google.com/p/support/wiki/WikiSyntax" target="new"><img src="./CToJavaTransformation - jnaerator - Summary of what JNAerator outputs for different kinds of C ObjectiveC inputs - Project Hosting on Google Code_files/tearoff_icon.gif" width="16" height="16"></a>
 </div>
 </div>
 <div class="round1"></div>
 <div class="round2"></div>
 <div class="round4"></div>
</div>
<input type="hidden" name="wikihelp" id="wikihelp" value="opened">

 </td></tr>
 </tbody></table>
 </form>
 </div>
 
 
 

<form name="delcom" action="http://code.google.com/p/jnaerator/w/delComment.do" method="POST">
 <input type="hidden" name="sequence_num" value="">
 <input type="hidden" name="create_time" value="">
 <input type="hidden" name="mode" value="">
 <input type="hidden" name="pagename" value="CToJavaTransformation">
 <input type="hidden" name="token" value="f7e09c2c2b7cbddf2f8cbbe4173179d3">
</form>


 <script src="./CToJavaTransformation - jnaerator - Summary of what JNAerator outputs for different kinds of C ObjectiveC inputs - Project Hosting on Google Code_files/dwiki_scripts_20081003.js"></script>


 <script src="./CToJavaTransformation - jnaerator - Summary of what JNAerator outputs for different kinds of C ObjectiveC inputs - Project Hosting on Google Code_files/prettify.js"></script>
 <script type="text/javascript">
 prettyPrint();
 </script>

<script type="text/javascript" src="./CToJavaTransformation - jnaerator - Summary of what JNAerator outputs for different kinds of C ObjectiveC inputs - Project Hosting on Google Code_files/dit_scripts.js"></script>



  
 
 <script type="text/javascript" src="./CToJavaTransformation - jnaerator - Summary of what JNAerator outputs for different kinds of C ObjectiveC inputs - Project Hosting on Google Code_files/core_scripts_20081103.js"></script>
 <script type="text/javascript" src="./CToJavaTransformation - jnaerator - Summary of what JNAerator outputs for different kinds of C ObjectiveC inputs - Project Hosting on Google Code_files/codesite_product_dictionary_ph.pack.04102009.js"></script>
 </div>
<div id="footer" dir="ltr">
 
 <div class="text">
 
 ©2010 Google -
 <a href="http://code.google.com/projecthosting/terms.html">Terms</a> -
 <a href="http://www.google.com/privacy.html">Privacy</a> -
 <a href="http://code.google.com/p/support/">Project Hosting Help</a>
 
 </div>
</div>

 <div class="hostedBy" style="margin-top: -20px;">
 <span style="vertical-align: top;">Powered by <a href="http://code.google.com/projecthosting/">Google Project Hosting</a></span>
 </div>
 
 


 
 



<div class="menuDiv instance0" id="menuDiv-projects-dropdown" style="display: none; "><b class="categoryTitle projects" style="display: block; ">Projects</b><div class="menuCategory projects"><a class="menuItem" style="display: block; " href="http://code.google.com/p/lfm-database-applications/">lfm-database-applications</a></div><div class="menuCategory controls"><hr class="menuSeparator"><a class="menuItem" style="display: block; " href="http://code.google.com/more/">Find developer products...</a><a class="menuItem" style="display: block; " href="http://code.google.com/hosting/">Find open source projects...</a></div></div></body></html>