defaultTasks 'jnaerator_cnv'
apply plugin: 'groovy'

def jdkVersion = 1.6
def enc = 'UTF-8'
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion
[compileJava, compileGroovy, compileTestJava, compileTestGroovy].each{ it.options.encoding = enc }
[compileGroovy, compileTestGroovy].each{ it.groovyOptions.encoding = enc }

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-1'
}

buildscript {
	repositories {
			flatDir(dirs: file("$projectDir/lib"))
		  //mavenCentral()
	}
	dependencies {
		classpath("com.ochafik.lang.jnaerator:jnaerator:0.9.5")
	}
}


repositories {
    mavenCentral()
}

dependencies {
    groovy group: 'org.codehaus.groovy', name: 'groovy-all', version: '1.7.8'
		testCompile 'junit:junit:4.8.1'
}

/*
sourceSets {
  main{
    groovy {
      //srcDirs=['src/main/groovy','src/main/java']
      srcDirs+='src/main/java'
    }
    java {
      srcDirs=[]
    }

  }
}
*/

//
//

growlNotify = { message ->
    println "==growlNotify(${message})=="
    return

    //path="/usr/local/bin/growlnotify"
    path="c:/opt/Growl/growlnotify.exe"
    if(!new File(path).exists())return
    imgpath="${basedir}/griffon-app/resources/griffon-icon-32x32.png"

    ant.exec(executable:path) {
          arg(value:"/t:Griffon")
          arg(value:"/i:\"${imgpath}\"")
          arg(value:"\"${message}\"")
    }
}


def env_init(){
	ant.property(environment:'env')
	//ant.properties['env.VISUAL_STUDIO_HOME']='C:\Program Files\Microsoft Visual Studio 10.0'
	//ant.properties['env.WINDOWS_SDK_HOME']='C:\Program Files\Microsoft SDKs\Windows\v7.0A'
	ant.properties['env.VISUAL_STUDIO_HOME']='../header/Microsoft Visual Studio 10.0'
	ant.properties['env.WINDOWS_SDK_HOME']='../header/Microsoft SDKs/Windows/v7.0A'

	println ant.properties['env.VISUAL_STUDIO_HOME']
	println ant.properties['env.WINDOWS_SDK_HOME']
}

def lib_copy(){
	def lib_dir = [
									'win32':'win32',
									'win64':'win64',
									'Linux-amd64':'x86_64',
									'Linux-x86_64':'x86_64'
								]
	lib_dir.each{k,v->
		srcDir = "master/$v"
		destDir = "libraries/$k"
		ant.copy(todir: destDir, overwrite: true ) {
			fileset(dir: srcDir, includes: '*.dll,*.so')
		}
	}


/*
	def lib_src = [
								'win32/rdi5api.dll'							:'win32/Di5Engine3.dll',
								'win32/rdi5numeric.dll'					:'win32/Di5Numeric.dll',
								'win32/rdi5apiext.dll'					:'win32/Di5Engine3.dll',
								'win64/rdi5api.dll'							:'win64/Di5Engine3.dll',
								'win64/rdi5numeric.dll'					:'win64/Di5Numeric.dll',
								'win64/rdi5apiext.dll'					:'win64/Di5Engine3.dll',
								'Linux-amd64/librdi5api.so'			:'x86_64/libDi5Engine3.so',
								'Linux-amd64/librdi5numeric.so'	:'x86_64/libDi5Numeric.so',
								'Linux-amd64/librdi5apiext.so'	:'x86_64/libDi5Engine3.so',
								'Linux-x86_64/librdi5api.so'		:'x86_64/libDi5Engine3.so',
								'Linux-x86_64/librdi5numeric.so':'x86_64/libDi5Numeric.so',
								'Linux-x86_64/librdi5apiext.so'	:'x86_64/libDi5Engine3.so'
								]

	lib_src.each{k,v->
		srcF = "master/$v"
		destF = "libraries/$k"
		ant.echo "srcF=$srcF"
		ant.echo "destF=$destF"
		ant.copy(tofile: destF,file:srcF, overwrite: true )
	}
*/
}

def lib_add(){
	ant.exec(executable:"jar") {
          arg(value:"uf")
          arg(value:"dist/lfm.jar")
          arg(value:"libraries")
  }


	srcDir = "setting"
	destDir = "dist"
	ant.copy(todir: destDir, overwrite: true ) {
		fileset(dir: srcDir, includes: '*.bat,*.jar,*.groovy,*.sh')
	}

}


def INCPATH="./inc"

import com.ochafik.lang.jnaerator.JNAerator
import com.ochafik.lang.jnaerator.JNAeratorConfig

task jnaerator_clean{
	ant.property(environment:'env')
	ant.echo ant.properties['env.USERPROFILE']
	ant.delete(dir:"${ant.properties['env.USERPROFILE']}/.jnaerator/extractedLibraries")
	ant.delete(dir:"${ant.properties['env.USERPROFILE']}/.jnaerator/temp")
	ant.delete(dir:"${projectDir}/libraries")
	ant.delete(dir:"${projectDir}/dist")
	//ant.delete(file:"${projectDir}/dist/lfm.jar")
}

task jnaerator_cnv(depensOn:jnaerator_clean) {
	env_init()
	lib_copy()
	String[] argsArray=[
									'-library','Di5Engine3',"$INCPATH/rdi5api.h","$INCPATH/di5api.h","$INCPATH/rdi5apiext.h","master/win32/Di5Engine3.dll",
									'-library','Di5Numeric',"$INCPATH/numeric.h","master/win32/Di5Numeric.dll",
/*
									'-library','rdi5api',"$INCPATH/rdi5api.h","$INCPATH/di5api.h","libraries/win32/rdi5api.dll",
									'-library','rdi5numeric',"$INCPATH/numeric.h","libraries/win32/rdi5numeric.dll",
									'-library','rdi5apiext',"$INCPATH/rdi5apiext.h","libraries/win32/rdi5apiext.dll",
*/
									'-o', './tmp',
									'-I./inc',
									'-jar','dist/lfm.jar',
									'-v',
									'-DD5APICALL=__stdcall'
								] 

	ant.exec(executable:"java") {
          arg(value:"-jar")
          arg(value:"lib/jnaerator-0.9.5.jar")
					argsArray.each{arg(value:it)}
  }

/*
	JNAeratorConfig config = new JNAeratorConfig();
	println config.dump()

	JNAerator.main(new JNAerator(config), argsArray)
	//JNAerator.main(argsArray)
*/
	lib_add()
}


//
// 以降は
// executable jar をつくる場合に必要な記述が必要です
//
//jar {
//    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//}
//manifest.mainAttributes("Main-Class" : "main")

