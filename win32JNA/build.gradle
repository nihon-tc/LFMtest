//defaultTasks 'jnaerator_cnv'

apply plugin: 'groovy'
//apply plugin: 'java'

//apply plugin: より前の行に archivesBaseName を記述しても有効になりません。
version = "0.1"
archivesBaseName = "lfm-all"
//tasksBaseName ="lfm"


def jdkVersion = 1.6
def enc = 'UTF-8'
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

[compileGroovy, compileTestGroovy].each{ it.options.encoding = enc }
[compileGroovy, compileTestGroovy].each{ it.groovyOptions.encoding = enc }

[compileJava, compileTestJava].each{ it.options.encoding = enc }


task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-2'
}

buildscript {
  repositories {
      flatDir(dirs: file("$projectDir/libs"))
      //mavenCentral()
  }
  dependencies {
    classpath("com.ochafik.lang.jnaerator:jnaerator:0.9.7")
  }
}


repositories {
    flatDir(dirs: file('lib'))
    mavenCentral()
    mavenRepo urls: [ "http://download.java.net/maven/2/",
                      "http://repository.jboss.org/maven2/",
                      "http://repository.jboss.org/nexus/content/groups/public-jboss/",
                      "http://nativelibs4java.sourceforge.net/maven"
                    ]
}

//ローカルの指定は module
dependencies {
    groovy 'org.codehaus.groovy:groovy-all:1.7.10'
    //groovy 'com.jnaerator:jnaerator-runtime:0.9.7'
    //groovy 'net.java.dev.jna:jna:'
    //groovy 'di5engine3:Di5Engine3Library:'
    groovy module(":lfm:") 
    testCompile 'junit:junit:4.8.1'
}

/*
sourceSets {
  main{
    groovy {
      //srcDirs=['src/main/groovy','src/main/java']
      srcDirs+='src/main/java'
    }
    java {
      srcDirs=[]
    }

  }
}
*/


//jnaerator OS check Function
import com.sun.jna.Platform
def getCurrentOSAndArchString() {
    String os = System.getProperty("os.name")
    String arch = System.getProperty("os.arch");
    if (os.equals("Mac OS X")) {
      os = "darwin";
      arch = "fat";
      //arch = Platform.is64Bit() ? "64" : "32";
    } else if (os.startsWith("Windows")) {
      return "win" + (Platform.is64Bit() ? "64" : "32");
    } else if (os.matches("SunOS|Solaris")){
      os = "solaris";
    }
    return os + "-" + arch;
}



def env_init(){
  ant.property(environment:'env')
  //ant.properties['env.VISUAL_STUDIO_HOME']='C:\Program Files\Microsoft Visual Studio 10.0'
  //ant.properties['env.WINDOWS_SDK_HOME']='C:\Program Files\Microsoft SDKs\Windows\v7.0A'
  ant.properties['env.VISUAL_STUDIO_HOME']='../header/Microsoft Visual Studio 10.0'
  ant.properties['env.WINDOWS_SDK_HOME']='../header/Microsoft SDKs/Windows/v7.0A'

  println "VISUAL_STUDIO_HOME=${ant.properties['env.VISUAL_STUDIO_HOME']}"
  println "WINDOWS_SDK_HOME=${ant.properties['env.WINDOWS_SDK_HOME']}"
  println "OSTYPE=${getCurrentOSAndArchString()}"
}



def setting_copy={destDir->
  //debug setting additonal
  srcDir = "setting"
  //destDir = "dist"
  ant.copy(todir: destDir, overwrite: true ) {
    //fileset(dir: srcDir, includes: '*.bat,*.jar,*.groovy,*.sh')
    fileset(dir: srcDir, includes: '*.bat,*.groovy,*.sh')
  }

}


def INCPATH="./inc"

import com.ochafik.lang.jnaerator.JNAerator
import com.ochafik.lang.jnaerator.JNAeratorConfig

task jnaerator_clean(depensOn:clean){
  ant.property(environment:'env')
  ant.echo ant.properties['env.USERPROFILE']
  ant.delete(dir:"${ant.properties['env.USERPROFILE']}/.jnaerator/extractedLibraries")
  ant.delete(dir:"${ant.properties['env.USERPROFILE']}/.jnaerator/temp")
  ant.delete(file:"${projectDir}/lib/lfm*.jar")
  //ant.delete(dir:"${projectDir}/lib/${archivesBaseName}*.jar")
  //ant.delete(dir:"${projectDir}/dist")
  //ant.delete() {
  //  fileset(dir: "${projectDir}/dist")
  //}
  ant.delete() {
    fileset(dir: "${projectDir}",includes: '_jnaerator.*')
  }
}

task jnaerator_cnv(depensOn:jnaerator_clean) {
  env_init()

  // see http://code.google.com/p/nativelibs4java/source/browse/trunk/libraries/OpenCV/config.jnaerator
  String[] argsArray=[
/*
                  //[TODO]NG!!  all header not include,linux not running
                  '-library','Di5Engine3'
                  ,"$INCPATH/rdi5api.h","$INCPATH/rdi5apiext.h","$INCPATH/di5api.h","$INCPATH/numeric.h","$INCPATH/di5error.h"
                  ,"master/win32/Di5Engine3.dll"

                  ,'-library','Di5Numeric'
                  ,"$INCPATH/numeric.h","$INCPATH/numconv.h"
                  ,"master/win32/Di5Numeric.dll"
*/
                  '-library','Di5Engine3'
                  ,"$INCPATH/rdi5api.h","$INCPATH/di5api.h","$INCPATH/rdi5apiext.h"
                  ,"master/win32/Di5Engine3.dll",
                  '-library','Di5Numeric'//,"$INCPATH/numeric.h"
                  ,"master/win32/Di5Numeric.dll",

                  ,"-arch","win64" ,"master/win64/*.dll"
                  ,"-arch","Linux-amd64" ,"master/x86_64/*.so"
                  ,"-arch","Linux-x86_64" ,"master/x86_64/*.so"
                  //,"-arch","darwin-fat" ,"master/x86_64/*.so"

                  ,'-o', './tmp',
                  '-I./inc',
                  '-jar','lib/lfm.jar',
                  '-v',
                  '-DD5APICALL=__stdcall'
                ] 

  ant.exec(executable:"java") {
          arg(value:"-jar")
          arg(value:"libs/jnaerator-0.9.7.jar")
          argsArray.each{arg(value:it)}
  }
/*
  JNAeratorConfig config = new JNAeratorConfig();
  println config.dump()
  JNAerator.main(new JNAerator(config), argsArray)
  //JNAerator.main(argsArray)
*/

}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    setting_copy("build/libs")
}
//manifest.mainAttributes("Main-Class" : "main")

