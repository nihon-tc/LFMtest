package di5engine3;
import com.ochafik.lang.jnaerator.runtime.Structure;
/**
 * <i>native declaration : inc\rdi5api.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TRFilterInfo extends Structure<TRFilterInfo, TRFilterInfo.ByValue, TRFilterInfo.ByReference > {
	/// < 位置情報のサイズ
	public int PVSize;
	/// < 値リストのデータ型を整数化したもの
	public int VLType;
	/// < 値リストの各値の幅
	public int VLWidth;
	/// < 値リストのサイズ（個数）
	public int VLSize;
	/// < 値リストが文字列の場合、文字列格納領域のサイズ
	public int CharAreaSize;
	/**
	 * < 項目名称<br>
	 * C type : char[D5_MAX_NAME_LENGTH + 8]
	 */
	public byte[] FilterName = new byte[(di5engine3.Di5Engine3Library.D5_MAX_NAME_LENGTH + 8)];
	public TRFilterInfo() {
		super();
	}
	/**
	 * @param PVSize < 位置情報のサイズ<br>
	 * @param VLType < 値リストのデータ型を整数化したもの<br>
	 * @param VLWidth < 値リストの各値の幅<br>
	 * @param VLSize < 値リストのサイズ（個数）<br>
	 * @param CharAreaSize < 値リストが文字列の場合、文字列格納領域のサイズ<br>
	 * @param FilterName < 項目名称<br>
	 * C type : char[D5_MAX_NAME_LENGTH + 8]
	 */
	public TRFilterInfo(int PVSize, int VLType, int VLWidth, int VLSize, int CharAreaSize, byte FilterName[]) {
		super();
		this.PVSize = PVSize;
		this.VLType = VLType;
		this.VLWidth = VLWidth;
		this.VLSize = VLSize;
		this.CharAreaSize = CharAreaSize;
		if (FilterName.length != this.FilterName.length) 
			throw new java.lang.IllegalArgumentException("Wrong array size !");
		this.FilterName = FilterName;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected TRFilterInfo newInstance() { return new TRFilterInfo(); }
	public static TRFilterInfo[] newArray(int arrayLength) {
		return Structure.newArray(TRFilterInfo.class, arrayLength);
	}
	public static class ByReference extends TRFilterInfo implements Structure.ByReference {
		
	};
	public static class ByValue extends TRFilterInfo implements Structure.ByValue {
		
	};
}
