package di5engine3;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.NativeLong;
/**
 * <i>native declaration : inc\rdi5api.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TLicenseData extends Structure<TLicenseData, TLicenseData.ByValue, TLicenseData.ByReference > {
	/**
	 * < MACアドレス<br>
	 * C type : char[D5_MAX_NAME_LENGTH]
	 */
	public byte[] LicenseMacAddr = new byte[(di5engine3.Di5Engine3Library.D5_MAX_NAME_LENGTH)];
	/**
	 * < 最大行数（単位：千行）<br>
	 * C type : INT64
	 */
	public NativeLong MaxRow;
	/**
	 * < 最大メモリ量（単位：MB）<br>
	 * C type : INT64
	 */
	public NativeLong MaxMemory;
	/// < ライセンス中CPU数
	public int CpuNum;
	/// < マルチユーザ数
	public int UserNum;
	/**
	 * < 有効期限（YYYYMMDD）<br>
	 * C type : char[D5_LICENSE_DATE_SIZE]
	 */
	public byte[] ExpirationDate = new byte[(di5engine3.Di5Engine3Library.D5_LICENSE_DATE_SIZE)];
	public TLicenseData() {
		super();
	}
	/**
	 * @param LicenseMacAddr < MACアドレス<br>
	 * C type : char[D5_MAX_NAME_LENGTH]<br>
	 * @param MaxRow < 最大行数（単位：千行）<br>
	 * C type : INT64<br>
	 * @param MaxMemory < 最大メモリ量（単位：MB）<br>
	 * C type : INT64<br>
	 * @param CpuNum < ライセンス中CPU数<br>
	 * @param UserNum < マルチユーザ数<br>
	 * @param ExpirationDate < 有効期限（YYYYMMDD）<br>
	 * C type : char[D5_LICENSE_DATE_SIZE]
	 */
	public TLicenseData(byte LicenseMacAddr[], NativeLong MaxRow, NativeLong MaxMemory, int CpuNum, int UserNum, byte ExpirationDate[]) {
		super();
		if (LicenseMacAddr.length != this.LicenseMacAddr.length) 
			throw new java.lang.IllegalArgumentException("Wrong array size !");
		this.LicenseMacAddr = LicenseMacAddr;
		this.MaxRow = MaxRow;
		this.MaxMemory = MaxMemory;
		this.CpuNum = CpuNum;
		this.UserNum = UserNum;
		if (ExpirationDate.length != this.ExpirationDate.length) 
			throw new java.lang.IllegalArgumentException("Wrong array size !");
		this.ExpirationDate = ExpirationDate;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected TLicenseData newInstance() { return new TLicenseData(); }
	public static TLicenseData[] newArray(int arrayLength) {
		return Structure.newArray(TLicenseData.class, arrayLength);
	}
	public static class ByReference extends TLicenseData implements Structure.ByReference {
		
	};
	public static class ByValue extends TLicenseData implements Structure.ByValue {
		
	};
}
